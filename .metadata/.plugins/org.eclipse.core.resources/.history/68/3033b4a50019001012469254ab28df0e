package ex0414.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URLEncoder;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class LoginServlet extends HttpServlet {
	String dbId = "j";
	String dbPwd = "1234";
		
	public LoginServlet() {
		System.out.println("Login constructor call...");
	}
	
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("LoginServlet doPost call...");
		
		String userId = request.getParameter("userId");
		String userPwd = request.getParameter("userPwd");
		String userName = request.getParameter("userName");
		
		System.out.println("userId = "+userId);
		System.out.println("userPwd = "+userPwd);
		System.out.println("userName = "+userName);
		
		if (dbId.equals(userId) && dbPwd.equals(userPwd)) {
			// 성공 - loginOk.jsp
			// 1. Redirect 방식 - 새로운 request, response를 생성해서 이동
			response.sendRedirect("loginOk.jsp?userName="+URLEncoder.encode(userName,"UTF-8"));		// get 방식의 queryString으로 데이터 전달
			
			// 2. Forward 방식 - 기존의 request, response가 유지된다. 
//			request.getRequestDispatcher("loginOk.jsp").forward(request, response);
		} else {
			response.setContentType("text/html;charset=UTF-8");
			// 메시지 출력
			PrintWriter out = response.getWriter();
			out.println("<script>");
			
			out.println("alert('정보를 다시 입력해주세요!!!!')");
//			out.println("location.href='login.html'");
			/**
			 * redirect 는 was(servletContainer)에서 실행되는데
			 * script 태그 영역은 브라우저에서 실행되기 때문에
			 * redirect가 이미 실행되기 때문에 script는 아예 적용이 안된다 그래서 script 태그 영역을 사용하려면
			 * location.href = "주소"를 사용해줘야 되며,
			 * 정보가 초기화되지 않게 하려면 history.back()을 사용
			 */
			out.println("history.back();");
			
			out.println("</script>");
			// 실패 - login.html 이동
//			response.sendRedirect("login.html");
			
		}
	}
}
